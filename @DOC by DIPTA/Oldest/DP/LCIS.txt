int n,m,A[505],B[505],prev[505],C[505];
void LCIS()
{
       int i,j,last,cur,idx=-1,length=0;
       vector <int> res;
       rep(i,n)
       {
              cur=0,last=-1;
              rep(j,m)
              {
                     if(A[i]==B[j] && cur+1>C[j])
                     {
                            C[j]=cur+1;
                            prev[j]=last;
                     }
                     if(A[i]>B[j] && cur<C[j])
                     {
                            cur=C[j];
                            last=j;
                     }
              }
       }
          rep(i,m)
          {   //    printf("i:: %d\n",i,C[i]);
                 if(C[i]>length)
                 {
                        length=C[i];
                        idx=i;

                 }
          }
          printf("%d\n",length);
          while(idx!=-1)
          {
                 res.push_back(B[idx]);
                 idx=prev[idx];
          }
          reverse(res.begin(),res.end());
          for(i=0;i<res.size();i++)
          {
                 printf("%d%s",res[i],i+1==res.size()?"\n":" ");
          }
}

/// Longest common increasing subsequence of A and B in O(n * m)
int lcis(int n, int* A, int m, int* B){
    int i, j, l, res, dp[MAX] = {0};

    for (i = 0; i < n; i++){
        for (l = 0, j = 0; j < m; j++){
            if (A[i] == B[j] && dp[j] <= l) dp[j] = l + 1;
            else if (B[j] < A[i] && dp[j] > l) l = dp[j];
        }
    }

    for (i = 0, res = 0; i < m; i++){
        if (dp[i] > res) res = dp[i];
    }
    return res;
}
/// lcis
#include <cstdio>
const int Maxn=501;
int a[Maxn],b[Maxn],p[Maxn],f[Maxn],o[Maxn];

int main()
{
	int n,m,i,j,k;
	scanf("%d",&n);
	for (i=1; i<=n; ++i) scanf("%d",a+i);
	scanf("%d",&m);
	for (i=1; i<=m; ++i) scanf("%d",b+i);
	for (i=1; i<=n; ++i)
	{
		k=0;
		for (j=1; j<=m; ++j)
			if (a[i]==b[j] && f[k]+1>f[j]) f[j]=f[k]+1, p[j]=k; else
			if (b[j]<a[i] && f[j]>f[k]) k=j;
	}
	k=j=0;
	for (i=1; i<=m; ++i)
		if (f[i]>f[j]) j=i;
	for (i=j; i; i=p[i]) o[++k]=b[i];
	printf("%d\n",k);
	while (k) printf("%d ",o[k--]);
}