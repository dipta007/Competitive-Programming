typedef long long ll;
typedef pair<int, int> ii; 

const int maxn = 2e5 + 10;

int t[maxn * 21], L[maxn * 21], R[maxn * 21], idx = 0, root[maxn]; 
int n, q, arr[maxn]; 

void build(int id, int l, int r) {
	if(l == r) return; 
	L[id] = idx++;
	R[id] = idx++; 
	int mid = l + r >> 1; 
	build(L[id], l, mid);
	build(R[id], mid+1, r); 
}
int update(int id, int l, int r, int i, int v) {
	if(r < i || l > i) return id; 
	int ID = idx++; 
	if(l == r) {
		t[ID] = t[id] + v; 
		return ID;
	} int mid = l + r >> 1; 
	L[ID] = update(L[id], l, mid, i, v);
	R[ID] = update(R[id], mid+1, r, i, v); 

	t[ID] = t[L[ID]] + t[R[ID]];
	return ID;  
}
int query(int id, int l, int r, int i, int j) {
	if(r < i || l > j) return 0;
	if(i <= l && r <= j) return t[id];
	int mid = l + r >> 1;
	return query(L[id], l, mid, i, j) + query(R[id], mid+1, r, i, j); 
}

int lessCount(int l, int r, int k) {
	if(l > r) return 0;
	return query(root[r], 1, n, 1, k-1) - query(root[l-1], 1, n, 1, k-1); 
}
int greatCount(int l, int r, int k) {
	if(l > r) return 0;
	return (r - l + 1) - lessCount(l, r, k + 1);
}
int search(int a, int b, int l, int r, int k) {
	if(l == r) return l; 
	int cnt = t[L[a]] - t[L[b]];
	int mid = l + r >> 1;
	if(cnt >= k) 
		return search(L[a], L[b], l, mid, k);
	return search(R[a], R[b], mid+1, r, k - cnt);
}
int kthnum(int l, int r, int k) {
	return search(root[r], root[l-1], 1, n, k);
}
void init() {
	root[0] = idx++; 
	build(root[0], 1, n); 
	for(int i = 1; i <= n; i++) {
		root[i] = update(root[i-1], 1, n, arr[i], +1);
	}
} 

inline ll c(int x) { return x * 1ll * (x - 1) / 2; }

int main(int argc, char const *argv[]) {
	scanf("%d %d", &n, &q); 
	for(int i = 1; i <= n; i++) 
		scanf("%d", &arr[i]); 
	init(); 
	for(int i = 0; i < q; i++) {
		int l, r, d, u; ll ans = 0; 
		scanf("%d %d %d %d", &u, &l, &d, &r);

		ans += c(l - 1);
		ans += c(u - 1);
		ans += c(n - d);
		ans += c(n - r); 

		ans -= c(greatCount(1, u-1, r));
		ans -= c(greatCount(d+1, n, r));
		ans -= c(lessCount(1, u-1, l));
		ans -= c(lessCount(d+1, n, l)); 
		printf("%lld\n", c(n) - ans);
	}
}

/*****************using pointer *************/
const int maxn =  2e5 + 10; 

struct node {
	ll val; 
	node *left, *right; 
	node(ll _val = 0, node *_left = NULL, node *_right = NULL) : 
		val(_val), left(_left), right(_right){}

	void build(int l, int r) {
		if(l == r) return; 
		left = new node(); 
		right = new node();
		int mid = l + r >> 1;
		left -> build(l, mid);
		right -> build(mid+1, r);
	}
	node *update(int l, int r, int idx, ll v) {
		if(r < idx || l > idx) return this; 
		if(l == r) {
			node *p = new node(val, left, right);
			p -> val += v;
			return p;
		} int mid = l + r >> 1;
		node *p = new node(val);
		p -> left = left -> update(l, mid, idx, v);
		p -> right = right -> update(mid+1, r, idx, v);
		p -> val = p -> left -> val + p -> right -> val;
		return p;
	}
	ll query(int l, int r, int i, int j) {
		if(r < i || l > j) return 0;
		if(i <= l && r <= j) return val;
		int mid = l + r >> 1;
		return left -> query(l, mid, i, j) + 
			  right -> query(mid+1,r,i, j);
	} 
} *root[maxn];
int n, q, arr[maxn];

int lessCount(int l, int r, int k) {
	if(l > r) return 0; 
	int ret = root[r] -> query(1, n, 0, k-1); 
		ret-=root[l-1]-> query(1, n, 0, k-1); 
	return ret;
}
int greatCount(int l, int r, int k) {
	if(l > r) return 0; 
	return (r - l + 1) - lessCount(l, r, k+1); 
}
void init() {
	root[0] = new node(); 
	root[0] -> build(1, n); 
	for(int i = 1; i <= n; i++) 
		root[i] = root[i-1] -> update(1, n, arr[i], +1);
}
inline ll c(int x) { return x * 1ll * (x - 1) / 2; }

int main(int argc, char const *argv[]) {
	scanf("%d %d", &n, &q); 
	for(int i = 1; i <= n; i++) 
		scanf("%d", &arr[i]); 
	init(); 

	for(int i = 0; i < q; i++) {
		int l, r, d, u; ll ans = 0; 
		scanf("%d %d %d %d", &u, &l, &d, &r);

		ans += c(l - 1);
		ans += c(u - 1);
		ans += c(n - d);
		ans += c(n - r); 

		ans -= c(greatCount(1, u-1, r));
		ans -= c(greatCount(d+1, n, r));
		ans -= c(lessCount(1, u-1, l));
		ans -= c(lessCount(d+1, n, l)); 
		printf("%lld\n", c(n) - ans);
	}
}