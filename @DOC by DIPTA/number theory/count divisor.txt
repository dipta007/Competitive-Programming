#define M 1000000
bool marked[M];
vector<int> primes;   // we'll preload primes once at the beginning

void sieve(int n)     // SIEVE caliye prime ber korbo
{
    primes.push_back(2);
    for (int i = 3; i * i <= n; i += 2)
    {
        if (marked[i] == 0)
        {
            primes.push_back(i);
            for (int j = i * i; j <= n; j += i + i)
            {
                marked[j] = 1;
            }
        }
    }
}

int NOD ( int n )
{
    int sqrtn = sqrt ( n );
    int res = 1;
    for ( int i = 0; i < primes.size() && primes[i] <= sqrtn; i++ )
    {
        if ( n % primes[i] == 0 )
        {
            int p = 0; /*Counter for power of primes*/
            while ( n % primes[i] == 0 )
            {
                n /= primes[i];
                p++;
            }
            sqrtn = sqrt ( n );
            p++;/*Increase it by one at end*/
            res *= p; /*Multiply with answer*/
        }
    }
    if ( n != 1 )
    {
        res *= 2; /*Remaining prime has power p^1. So multiply with 2*/
    }
    return res;
}



// ekhane 1 ta number er koita divisor ase ta return korbe
