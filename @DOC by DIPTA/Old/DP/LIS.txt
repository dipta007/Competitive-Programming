///input must be 0 indexed

vector<int> Sequence,I,L;

int LisNlogK() {
    int i;
    I.clear();
    L.clear();
    I.push_back(-INF);
    for( i = 1; i <= n; i++ )I.push_back(INF);
    int LisLength = 0;
    for( i = 0; i < n; i++ ) {
        int low, high, mid;
        low = 0;
        high = LisLength;
        while( low <= high ) {
            mid = ( low + high ) / 2;
            if( I[mid] < Sequence[i] )
                low = mid + 1;
            else
                high = mid - 1;
        }
        I[low] = Sequence[i];
        if( LisLength < low )
            LisLength = low;
        L.push_back(low);
    }
    return LisLength;
}

void findSequence( int length ) {
    int ind;
    for(int j=L.size()-1; j>=0; j--)
    {
        if(L[j]==length)
        {
            ind=j;
            break;
        }
    }
    stack<int> st;
    int mx=length-1;
    st.push(Sequence[ind]);
    for(int i=ind-1; i>=0; i--)
    {
        if(L[i]==mx&&Sequence[ind]>Sequence[i])
        {
            st.push(Sequence[i]);
            ind=i;
            mx--;
        }
    }
    while(!st.empty())
    {
        cout<<st.top()<<endl;
        st.pop();
    }

}