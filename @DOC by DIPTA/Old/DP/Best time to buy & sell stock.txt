/** 
Given price of stock in each day find the maximum profit. 
You may complete at most k transactions.
you must sell the stock before you buy again.
**/

class Solution {
    vector<vector<int> > dp;
public:
    int maxProfit(int k, vector<int>& A) {
        int len = A.size();
        if (k >= len / 2) {
            int res = 0;
            for (int i = 1; i < len; i++) {
                if (A[i] > A[i-1])res += A[i] - A[i-1];
            }
            return res;
        }
        dp.resize(k + 1, vector<int> (len + 2, 0));
        for (int i = 1; i <= k; i++) {
            int mxDiff = -1e9;
            for (int j = 0; j < A.size(); j++) {
                int res = dp[i][j];
                mxDiff = max(mxDiff, dp[i-1][j + 1] - A[j]);
                // cout
                res = max(res, mxDiff + A[j]);
                dp[i][j+1] = res;

            }
        }
        return dp[k][len];
    }
};
/***
unlimited transactions
need to sell before buying
*****/
int Solution(const vector<int> &A) {
    int res = 0;
    for (int i = 1; i < A.size(); i++) if (A[i] > A[i-1])res += A[i] - A[i-1];
    return res;
}


/***
unlimited transactions
no need to sell before buying again
****/
int maxProfit(const vector<int> &A) {
    priority_queue<int, vector<int>, greater<int> > pq;
    int res = 0;
    for (int i = 0; i < A.size(); i++) {
        if (!pq.empty() && pq.top() < A[i]) {
            int val = pq.top();pq.pop();
            res += A[i] - val;
            pq.push(A[i]);
        }
        pq.push(A[i]);
    }
    return res;
}