
/**
Input:
s = "aa"
p = "a"
Output: false

Input:
s = "aa"
p = "a*"
Output: true

Input:
s = "aab"
p = "c*a*b"
Output: true

Input:
s = "ab"
p = ".*"
Output: true
**/


class Solution {
public:
    bool isMatch(string s, string p);
};
// T[i][j] = {
//         T[i][j-1] // if str[i] == patern[j] || patern[j] == '.'
//         T[i][j-2] // if patern[j] = '*'
//         T[i-1][j] // if str[i] == patern[j-1] || patern[j-1] == '.'
//         false
// }

bool Solution::isMatch( string A,  string B) {
    A = "#" + A, B = "#" + B;
    int lenA = A.size(), lenB = B.size();
    vector<vector<int> > dp(lenA, vector<int>(lenB, 0));
    dp[0][0] = 1;
    for (int j = 1; j < lenB; j++) {
        if (B[j] == '*')
            dp[0][j] |= dp[0][j-2];
    }
    for (int i = 1; i < lenA; i++) {
        for (int j = 1; j < lenB; j++) {
            int flag = 0;
            if (A[i] == B[j] || B[j] == '.')
                flag = dp[i-1][j-1];
            else if (B[j] == '*') {
                flag |= dp[i][j - 2];
                if (A[i] == B[j - 1] || B[j - 1] == '.') {
                    flag |= dp[i - 1][j];
                }
            }
            dp[i][j] = flag;
        }
    }
    return dp[lenA - 1][lenB - 1];
}



// memory optimized

int Solution::isMatch(const string x, const string y) {
    string A = "#" + x, B = "#" + y;
    int lenA = A.size(), lenB = B.size();
    vector<vector<int> > dp(2, vector<int>(lenB, 0));
    int cur = 0, prev = 1;
    dp[cur][0] = 1;
    for (int j = 1; j < lenB; j++) {
        if (B[j] == '*')
            dp[cur][j] |= dp[0][j-2];
    }
    for (int i = 1; i < lenA; i++) {
        cur ^= 1, prev ^= 1;
        for (int j = 0; j < lenB; j++)dp[cur][j] = 0;
        for (int j = 1; j < lenB; j++) {
            int flag = 0;
            if (A[i] == B[j] || B[j] == '.')
                flag = dp[prev][j-1];
            else if (B[j] == '*') {
                flag |= dp[cur][j - 2];
                if (A[i] == B[j - 1] || B[j - 1] == '.') {
                    flag |= dp[prev][j];
                }
            }
            dp[cur][j] = flag;
        }
    }
    return dp[cur][lenB - 1];
}