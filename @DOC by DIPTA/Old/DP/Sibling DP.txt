/**Given a map of the kingdom's  cities, find and print the number of 
ways King Arthur can divide it between his two children such that they 
will not invade each other. The first sibling will invade the second sibling's 
city if the second sibling has no other cities directly connected to it. 
*/
#define NODE 100000
vector<int> adj[NODE+10];
int mod = 1e9+7;

vlong dp2 ( int s, int p, int c, int cur, int ally );

vlong dp ( int s, int p, int cur, int ally ) { ///This is f() in editorial

    vlong res = 0;

    res = dp2 ( s, p, 0, cur, ally ); ///Go and fetch some ally from the children

    return res;
}

int memo[NODE+10][2][2];
int done[NODE+10][2][2], cc = 1;

///Instead of recording s and c separately, we can simply store adj[s][c] in memo.
///No need to store p, since it is a rooted tree. Parent of a node is always same.

vlong dp2 ( int s, int p, int c, int cur, int ally ) { ///This is g() in editorial
    vlong res = 0;

    if ( c == adj[s].size() ) { ///Base case
        return ally;
    }

    int t = adj[s][c];

    ///Ignore back edge to parent of s. Rooted tree is not suppose to have this back edge anyway.
    if ( t == p ) {
        res = dp2 ( s, p, c + 1, cur, ally );
        return res;
    }


    if ( done[t][cur][ally] == cc ) return memo[t][cur][ally];
    done[t][cur][ally] = cc;

    ///For each child, we can make it ally with its parent
    ///And start independent sub-tree dp
    res = dp ( t, s, cur, 1 ) * dp2 ( s, p, c + 1, cur, 1 );
    res %= mod;

    ///Or, make it different
    vlong temp = dp ( t, s, 1 - cur, 0 ) * dp2 ( s, p, c + 1, cur, ally );
    temp %= mod;

    res += temp;
    NORM(res);

    return memo[t][cur][ally] = res;

}

void solution() {
    int n;
    scanf ( "%d", &n );

    FOR(i,1,n) {
        adj[i].clear();
    }

    FOR(i,0,n-2) {
        int a, b;
        scanf ( "%d %d", &a, &b );


        adj[a].pb ( b );
        adj[b].pb ( a );
    }

    cc++;
    vlong res = dp ( 1, 0, 0, 0 );
    res += dp ( 1, 0, 1, 0 );
    NORM(res);

    printf ( "%lld\n", res );
}

int main () {

    solution();

    return 0;
}
/***************************************/
/// http://codeforces.com/contest/855/problem/C

#define MAX 100005
const int MOD = 1e9+7;
vector<int> adj[MAX];
int k,x;
ll dp[MAX][15][5];
ll dp1[MAX][15][5];
ll call(int src,int par,int rem,int cond);
ll fuck_me(int pos,int src,int par,int rem,int cond)
{
    if(rem < 0)return 0;
    if(pos == adj[src].size())return rem == 0;
    int v = adj[src][pos];
    if(v  == par)return fuck_me(pos+1, src, par, rem, cond);
    ll &ret = dp1[v][rem][cond];
    if(ret != -1)return ret;
    ret = 0;
    repI(i,rem+1)
    {
        ret += (call(v,src,i,cond) * fuck_me(pos+1, src, par, rem-i,cond))%MOD;
    }
    ret %= MOD;
    return ret;
}


ll call(int src,int par,int rem,int cond)
{
    ll &ret = dp[src][rem][cond];
    if(ret != -1)return ret;
    ret = 0;
    /// par is less than k
    if(cond == 0)
    {
        /// src e k er cheye choto bosailam
        ret += (fuck_me(0, src, par, rem, 0)*(k-1))%MOD;
        ret %= MOD;
        /// src e k bosailam
        ret += fuck_me(0, src, par, rem-1, 1);
        ret %= MOD;
        /// src e k er cheye boro bosailam
        ret += (fuck_me(0, src, par, rem, 2)*(m-k))%MOD;
        ret %= MOD;
    }
    /// par is equal to k
    else if(cond == 1)
    {
        /// sudu k er cheye choto bosaite parbo
        ret += (fuck_me(0, src, par, rem, 0)*(k-1))%MOD;
    }
    /// par is bigger than k
    else
    {
        /// par boro tai sudu choto or boro bosaite parbo
        ret += (fuck_me(0, src, par, rem, 0)*(k-1))%MOD;
        ret += (fuck_me(0, src, par, rem, 2)*(m-k))%MOD;
    }
    ret %= MOD;
    return ret;
}

int main() {
    while(~getII(n,m))
    {
        rep(i,n)adj[i].clear();
        SET(dp);
        SET(dp1);
        rep(i,n-1)
        {
            int a,b;getII(a,b);
            adj[a].PB(b);adj[b].PB(a);
        }
        getII(k,x);
//        debug(k,x)
        ll ans = 0;
        repI(i,x+1)
            ans += call(1,0,i,0),ans %= MOD;
        printf("%lld\n",ans);

    }
}